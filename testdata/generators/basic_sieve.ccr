build(
  name      = "files",
  output    = {
    'tmp/*': strip_prefix('/tmp/'),
  },
  patch_inputs = {
    "/tmp/f.txt": file('fake.txt'),
    "/tmp/f.h": file('fake.txt'),
  },
)


resource(
  name   = "filter_exclude",
  parent = "common://resources:file",
  path   = "/usr/include/f.txt",
  source = sieve(
    inputs = [
      ":files",
    ],
    exclude = [
      "*.txt",
    ],
    rename = {
      'f.txt': '/usr/include/f.txt',
    },
  ),
)

resource(
  name   = "filter_include",
  parent = "common://resources:c_headers",
  path   = "/usr/include",
  source = sieve(
    inputs = [
      ":files",
    ],
    include = [
      "*.h",
    ],
  ),
)

resource(
  name   = "union",
  parent = "common://resources:file",
  path   = "fake.txt",
  source = ":s",
)

sieve(
  name   = 's',
  inputs = [
    ":files",
    file('fake.txt'),
  ],
)

resource(
  name   = "union2",
  parent = "common://resources:file",
  path   = "c.html",
  source = sieve(
    inputs = [
      file('fake.txt'),
      build(
        output    = {
          '/**': strip_prefix(''),
        },
        patch_inputs = {
          "/c.html": file('fake.txt'),
        },
      ),
    ],
  ),
)

resource(
  name   = "prefix",
  parent = "common://resources:file",
  path   = "/cat/fake.txt",
  source = sieve(
    inputs = [
      file('fake.txt'),
    ],
    prefix = 'cat',
  ),
)


resource(
  name   = "rename",
  parent = "common://resources:file",
  path   = "/real.txt",
  source = sieve(
    inputs = [
      file('fake.txt'),
    ],
    rename = {
      'fake.txt': 'real.txt',
    }
  ),
)
